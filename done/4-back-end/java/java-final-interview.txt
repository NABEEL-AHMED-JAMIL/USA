Object-Oriented Programming is a paradigm that provides many concepts, 
such as inheritance, data binding, polymorphism, etc.

Object:- Object means a real world entity such as a pen, chair.

OOP:- Object Oriented Programming is a methodology or paradigm to design a program using class and objects.

OOP Pillor:- OOP have six pillor.
1) Object, 2) Class, 3) Inheritance
4) Polymorphism, 5) Abstraction, 
6) Encapsulation

1) Object:- An entity which have state and behavior is know as an object.
An Object can be defined as instance of a class.

2) Class:- A class is a blueprint from which we ca creat an object.
Class doesn't consume any space.

3) Inheritance:- When one object (hasil kr lay)acquires all the properties and behaviors of a parent object.
it is know as inheritance. It provides code reusability.
***=> It is used to achieve Method Overriding (runtime polymorphism).
Note: Multiple inheritance is not supported in Java through class.

4) Polymorphism:- If one task is performed in different ways, it is known as polymorphism. 
***=> we use method overloading and method overriding to achieve polymorphism.
For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.

5) Abstraction:- Hiding internal details and showing functionality is known as abstraction.
***=> we use abstract class and interface to achieve abstraction.
For example phone call, we don't know the internal processing.

6) Encapsulation:- Binding (or wrapping) code and data together into a single unit are known as encapsulation.
***=> A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.

7) Coupling:- If a class has the details information of another class, there is strong coupling.
In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field.
You can use interfaces for the weaker coupling because there is no concrete implementation.

***=> 8) Association :- Association represents the relationship between the objects.
Here, one object can be associated with one object or many objects.
There can be four types of association between the objects:
One to One, One to Many, Many to One, Many to Many

9) Aggregation :-
Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state.
It represents the weak relationship between objects. It is also termed as a has-a relationship.

10) Method Overloading:- If a class has multiple methods having same name but different in parameters, 
it is known as Method Overloading.

11) Different ways to overload the method
There are two ways to overload the method in java
By changing number of arguments
By changing the data type
In Java, Method Overloading is not possible by changing the return type of the method only.

12) Method Overriding:- f subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.

13) Rules for Java Method Overriding
The method must have the same name as in the parent class
The method must have the same parameter as in the parent class.
There must be an IS-A relationship (inheritance).

14) Upcasting
If the reference variable of Parent class refers to the object of Child class, it is known as upcasting.

class A{}  
class B extends A{}  
A a=new B();//upcasting

=> Example of Java Runtime Polymorphism
class Bike{  
  void run(){System.out.println("running");}  
}  
class Splendor extends Bike{  

  void run(){System.out.println("running safely with 60km");}  
  
  public static void main(String args[]){  
    Bike b = new Splendor();//upcasting  
    b.run();  
  }  
}

15) Dynamic binding:- 
When type of the object is determined at run-time, it is known as dynamic binding.

Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.
Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.