Q: What is Java?
A: Java is an object-oriented, class-based, concurrent, secured and general-purpose computer programming language.
It is a widely used robust technology.

Q: Java is object-oriented language?
A: No, Java is not a "pure" object-oriented language.
1. Java has primitive types (int, char, boolean, etc.), which are not objects.
(Though you can use their wrapper classes like Integer, Character, etc.)0
2. Static methods and variables (like Math.random(), ***System.out.println) are accessible without an object.
3. Some features like enum, interface with default methods, and static imports can behave outside traditional OOP patterns.

Q: What is Object Oriented?
A: Java is an object-oriented programming language. Everything in Java is an object.
Object-oriented means we organize our software as a combination of different types of objects that incorporate both data and behavior.
Basic concept of OOPs are: Object, Class, Inheritance, Polymorphism, Abstraction, Encapsulation

---
***[Multiple inheritance]: Java does not support multiple inheritance through a class. It can be achieved by using Interfaces in Java.
***[Compiler and Interpreter]: Java uses both a compiler and an interpreter. Java source code is converted into bytecode at compilation time.
The interpreter executes this bytecode at runtime and produces output.
Java is interpreted, which is why it is platform-independent.
***[javac & java]: javac command part of [JDK], While java command part of [JRE]
---

***Q: What is System.out.println?
A: System.out.println() is used to print statement on the console.
Here, System is a class, out is an object of the [PrintStream] class, println() is a method of the PrintStream class.

***Q: How Java Execute Code?
A: As we know java use both (Compiler & Interpreter) to run the code. So we are use sample code to check how java execute code.
Java convert the code into [Byte-Code] with the help of compiler[JavaC] and Byte-Code[Platform Independ]
which is used by the [interpreter]JVM to convert into [machine code], this macine-code[Platform-Depende].

Q: What the platform depended mean?
A: Platform depended mean you have to use the runtime enviment base on the os like [window, mac, linux]

***Q: What is JDK?
A: The Java Development Kit (JDK) is a software development kit used to develop applications in the Java programming language.
There are 2 main components in JDK which are as below :-
***JDK (Java Development Kit)   =   1 - Development Tools   +   2 - JRE (Java Runtime Environment)
***JDK	Converts .java → .class (bytecode)
1) It includes various tools which are essential for compiling, running, documenting, packaging, 
and debugging Java applications, such as The Java Application Launcher (java), Java Compiler (javac), Documentation Generator (javadoc) etc.
2) It includes a runtime environment (Java Runtime Environment or JRE).

***Q: What is JRE?
A: The Java Runtime Environment (JRE) is a software platform that enables the [execution] of Java applications.
The JRE allows Java programs to [run on any device or operating system without modificatio], by translating Java bytecode into native machine code that the JVM executes].
***JRE (Java Runtime Environment) = Java Libraries + Unser Interface Toolkits + Deployment + JVM (Java Virtual Machine)
***JRE	Runs .class files (bytecode)
1) Java Libraries = Java collection, String and etc.
2) Unser Interface Toolkits = Swing and AWT
3) Deployment = This includes delivering Java programs in formats like JAR or WAR files
4) JVM (Java Virtual Machine) = The Java Virtual Machine (JVM) is an engine that executes Java bytecode.

***Q: What is JVM?
A: The JVM is a part of the Java platform that executes Java bytecode, converting it into machine code for the host system.
It provides an abstraction layer between compiled Java code and the operating system.
***JVM (Java Virtual Machine) = Class Loader + Memory Areas + Execution Engine
1) Class Loader: The class loader is responsible for [dynamically loading Java classes into memory at runtime]. 
2) Memory Areas: These regions manage memory allocation, storage of program data, and execution context.
The JVM's memory areas include the [heap:(for objects), stack:(for method calls and local variables), method area:(for class-level data [static & System.out.print])].
3) Execution Engine: [The execution engine interprets or compiles bytecode into machine code for execution by the CPU].
It includes the interpreter for line-by-line execution and the [Just-In-Time (JIT) compiler for optimizing frequently executed code paths].

Q: Type of variables?
A: There are 3 type of variables. which are [local, instance, static] variables.
1) Local Variable: A variable declared inside the body of the method is called local variable.
2) Instance Variable: A variable declared inside the class but outside the body of the method, is called an instance variable. It is not declared as static.
3) Static Variable: A variable that is declared as static is called a static variable

***Q: List of important keyword in java.
1) synchronized: Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.
2) serialization: Serialization is the process of [converting an object into a byte stream] so it can be: [Saved to a file, Sent over a network, Stored in a database️] 
3) transient: Java transient keyword is used in serialization. If you define [any data member as transient, it will not be serialized].
4) volatile: Java volatile keyword is used to indicate that a variable may change asynchronously. 
its write the value into the main memory its not part of thread cache value.
[locking read|write example] usefull for stage change [boolen usefull].