Exception Handling in Java
The Exception Handling in Java is one of the powerful mechanism to handle 
the runtime errors so that the normal flow of the application can be maintained.
Dictionary Meaning: Exception is an abnormal condition.
Exception Handling is a mechanism to handle runtime errors such as 
ClassNotFoundException, IOException, SQLException, RemoteException, etc.
An exception normally disrupts the normal flow of the application;

Hierarchy of Java Exception classes
The java.lang.Throwable class is the root class of 
Java Exception hierarchy inherited by two subclasses: Exception and Error. 

Types of Java Exceptions
There are mainly two types of exceptions: checked and unchecked. An error is considered as the unchecked exception. 
However, according to Oracle, there are three types of exceptions namely:

Checked Exception
Unchecked Exception
Error

1) Checked Exception
***The classes that directly inherit the Throwable class except RuntimeException and 
Error are known as checked exceptions. For example, IOException, SQLException, etc. 
***Checked exceptions are checked at compile-time.

2) Unchecked Exception
***The classes that inherit the RuntimeException are known as unchecked exceptions. 
For example, ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc. 
***Unchecked exceptions are not checked at compile-time, but they are checked at runtime.

3) Error
Error is irrecoverable. Some example of errors are OutOfMemoryError, VirtualMachineError, AssertionError etc.

***try	The "try" keyword is used to specify a block where we should place an exception code. 
It means we can't use try block alone. The try block must be followed by either catch or finally.

***The JVM firstly checks whether the exception is handled or not. If exception is not handled, 
JVM provides a default exception handler that performs the following tasks:
Prints out exception description.
Prints the stack trace (Hierarchy of methods where the exception occurred).
Causes the program to terminate.
the rest of the code is not executed (in such case, the rest of the code statement is not printed).

***Java finally block
Java finally block is a block used to execute important code such as closing the connection, etc.
Java finally block is always executed whether an exception is handled or not.
For each try block there can be zero or more catch blocks, but only one finally block.
***Note: The finally block will not be executed if the program exits (either by calling System.exit() 
or by causing a fatal error that causes the process to abort).

***The throw and throws is the concept of exception handling where the throw keyword throw the 
exception explicitly from a method or a block of code whereas the throws keyword is used in signature of the method.

**final is an access modifier,
finally is the block in Exception Handling and
(1) Once declared, final variable becomes constant and cannot be modified.
(2) final method cannot be overridden by sub class.
(3) final class cannot be inherited.

finalize is the method of object class. (clean up processing just before object is garbage collected)