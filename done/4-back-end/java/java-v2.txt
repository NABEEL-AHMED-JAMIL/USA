short intro (==, equals, call stack, state)
java.awt

Q:- Different B/W '==' or 'equals'
A:- 
'==' :- The equals() method compares the "value" inside String instances 
(on the heap) irrespective if the two object references refer 
to the same String instance or not.

'equals' :- the "==" operator compares the value of two object references to see 
whether they refer to the same String instance. 
If the value of both object references "refer to" the same 
String instance then the result of the boolean expression would be "true"

Q:- How to create a thread?
There are two ways to create a thread:
Thread class provide constructors and methods to create and perform 
operations on a thread.Thread class extends Object 
class and implements Runnable interface.
1) By extending Thread class
2) By implementing Runnable interface.

Q:- Commonly used methods of Thread class:
public void run(): is used to perform action for a thread.
public void start(): starts the execution of the thread.JVM calls the run() method on the thread.
public void sleep(long miliseconds): Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.
public void join(): waits for a thread to die (after this jo method hu gay wo ni calay gay jub tk ya thread katam ni hu jata).
public void yield|pause(): causes the currently executing thread object to temporarily pause and allow other threads to execute.
public void suspend(): is used to suspend the thread(depricated).
public void resume(): is used to resume the suspended thread(depricated).
public void stop(): is used to stop the thread(depricated).
public void interrupt(): interrupts the thread.

Q:- Priority Range?
Priority: Priority of each thread lies between 1 to 10. If a thread has a higher priority, it means that thread has got a better chance of getting picked up by the thread scheduler.

Q:- Can we start a thread twice
Ans:- No. After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException is thrown. In such case, thread will run once but for second time, it will throw exception.

Q:- What if we call Java run() method directly instead start() method?
Each thread starts in a separate call stack.
Invoking the run() method from the main thread, 
the run() method goes onto the current call stack rather than at the beginning of a new call stack.

Q;- Java join() method
Ans:- The join() method in Java is provided by the java.lang.Thread class 
that permits one thread to wait until the other thread to finish its execution.
Suppose th be the object the class Thread whose thread is doing its execution currently, 
then the th.join(); statement ensures that th is finished before the 
program does the execution of the next statement.

Q:- Description of The Overloaded join() Method
Ans:- join(): When the join() method is invoked, the (current thread) main thread stops 
its execution and the thread goes into the wait state. 
The current thread remains in the wait state until the thread on which the join() 
method is invoked has achieved its dead state. 
If interruption of the thread occurs, then it throws the InterruptedException.
note *:- public final synchronized void join(long millis)

Q:- Daemon Thread in Java.
Ans :- There are many java daemon threads running automatically e.g. gc, finalizer etc.

Q:- Java Thread Pool
Ans:- Java Thread pool represents a group of worker threads that are waiting for the job and reused many times.
1) newFixedThreadPool(int s): The method creates a thread pool of the fixed size s.
2) newCachedThreadPool(): The method creates a new thread pool that creates the new threads when needed but will still use the previously created thread whenever they are available to use.
3) newSingleThreadExecutor(): The method creates a new thread.

Q:- *Risks involved in Thread Pools.
Ans:- Deadlock, Thread Leakage 

Deadlock:
It is a known fact that deadlock can come in any program that involves multithreading, and a thread pool introduces another scenario of deadlock.
Thread Leakage:
Leakage of threads occurs when a thread is being removed from the pool to execute a task but is not returning to it after the completion of the task. 
Resource Thrashing: A lot of time is wasted in context switching among threads when the size of the thread pool is very large. 

Q:- ThreadGroup in Java
Java provides a convenient way to group multiple threads in a single object.

Q:- Shutdown Hook
A special construct that facilitates the developers to add some code that has to be run when the Java Virtual Machine (JVM) is shutting down is known as the Java shutdown hook. 
public void addShutdownHook(Thread hook){}  
public boolean removeShutdownHook(Thread hook){ }

Q:- Garbage Collection
Ans:- Garbage Collection is process of reclaiming the runtime unused memory automatically. In other words,
it is a way to destroy the unused objects.
it makes java memory efficient because garbage collector removes the unreferenced objects from heap memory.
It is automatically done by the garbage collector(a part of JVM) so we don't need to make extra efforts.

Q:- finalize() method
Ans:- The finalize() method is invoked each time before the object is garbage collected. This method can be used to perform cleanup processing. 
***Note: The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created any object without new, you can use finalize method to perform cleanup processing (destroying remaining objects).

Q:- Synchronization in Java (looking system)
Ans:- Synchronization in Java is the capability to control the access of multiple threads to any shared resource
Synchronized method is used to lock an object for any shared resource.
When a thread invokes a synchronized method, it automatically acquires the lock for that object and releases it when the thread completes its task.

Q:- ThreadPoolExecutor & Executors
Ans:- 
ExecutorService executor = Executors.newFixedThreadPool(2);
ReadWriteLock

Q:- Callable
Ans:- A Callable interface to define tasks that return a result.
A Callable is similar to Runnable except that it can return a result and throw a checked exception.

Q:- ***Executing Callable tasks using ExecutorService and obtaining 
the result using Future.
Ans:- The submit() method of executor service submits the task for execution by a thread.
However, it doesn’t know when the result of the submitted task will be available.
Therefore, it returns a special type of value called a Future which can be used to fetch the result of the task when it is available.
The concept of Future is similar to Promise in other languages like Javascript.

CompletableFuture.runAsync() is useful for tasks that don’t return anything.
CompletableFuture.supplyAsync() is your companion. It takes a Supplier<T> and returns CompletableFuture<T> where T is the type of the value obtained by calling the given supplier - 