JVM (Java Virtual Machine) is an abstract machine.
It is called a virtual machine because it doesn't physically exist. 
**It is a specification that provides a runtime environment in which Java bytecode can be executed.

JRE is an acronym for Java Runtime Environment. 
The Java Runtime Environment is a set of software tools which are used for developing Java applications.
It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. 
It contains a set of libraries + other files that JVM uses at runtime.

JDK
JDK is an acronym for Java Development Kit.
A software development environment which is used to develop Java applications.
*It physically exists. It contains JRE + development tools.
command : java and javac in the jdk.

**Class(Method) Area
Class(Method) Area stores per-class structures 
such as the runtime constant pool, field and method data, the code for methods.

**Heap
It is the runtime data area in which objects are allocated.

**Stack
Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.
**Each thread has a private JVM stack, (Rest Api example)
A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.


Variables
A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.
Variable is a name of memory location. There are three types of variables in java: local, instance and static.

There are three types of variables in Java:
*local variable (inside the method) A local variable cannot be defined with "static" keyword.
instance variable (declared inside the class but outside the body of the method & non static)
static variable (A variable that is declared as static is called a static variable.)

There are two types of data types in Java:
Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

*abstract: Java abstract keyword is used to declare an abstract class. 
An abstract class can provide the implementation of the interface.
It can have abstract and non-abstract methods.

*break: Java break keyword is used to break the loop or switch statement.
It breaks the current flow of the program at specified conditions.

*catch: Java catch keyword is used to catch the exceptions generated by try statements.
It must be used after the try block only.

*class: Java class keyword is used to declare a class.

**enum: Java enum keyword is used to define a fixed set of constants. 
Enum constructors are always private or default. (vip)

extends: Java extends keyword is used to indicate that a class is derived from another class or interface.

final: Java final keyword is used to indicate that a variable holds a constant value. 
It is used with a variable. It is used to restrict the user from updating the value of the variable.

finally: Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether an exception is handled or not.

implements: Java implements keyword is used to implement an interface.

interface: Java interface keyword is used to declare an interface. It can have only abstract methods.

package: Java package keyword is used to declare a Java package that includes the classes.

private: Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.

**protected: Java protected keyword is an access modifier. 
It can be accessible within the package and outside the package but through inheritance only. 
It can't be applied with the class. (mean only inheritance outside package accept)

public: Java public keyword is an access modifier.
It is used to indicate that an item is accessible anywhere. 
It has the widest scope among all other modifiers.

static: Java static keyword is used to indicate (that a variable or method is a class method). 
The static keyword in Java is mainly used for memory management. (keyword not use on class and interface)

this: Java this keyword can be used to refer the current object in a method or constructor.

**transient: Java transient keyword is used in serialization.
If you define any data member as transient, it will not be serialized.

**volatile: Java volatile keyword is used to indicate that a variable may change asynchronously.

what is oop
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. 
Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects

**Pillar of oop
Object -> not show but use 
Class -> not show but use
Inheritance
Polymorphism
Abstraction
Encapsulation

**Object
Any entity that has state and behavior is known as an object. 
For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.
An Object can be defined as an instance of a class.
An object contains an address and takes up some space in memory.

**Class (object cosue space while class not) (vip)
A class can also be defined as a blueprint from which you can create an individual object. 
Class doesn't consume any space.

**Inheritance (extend and impmleent)
When one object acquires all the properties and behaviors of a parent object,
it is known as inheritance. It provides code reusability.
It is used to achieve runtime polymorphism.

**Polymorphism
If one task is performed in different ways, it is known as polymorphism. For example: 
to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
In Java, we use method overloading and method overriding to achieve polymorphism. (vip)

**Abstraction
Hiding internal details and showing functionality is known as abstraction. 
For example phone call, we don't know the internal processing.
(we use abstract class and interface to achieve abstraction.)

**Encapsulation
(wrapping) code and data together into a single unit are known as encapsulation. 
For example, a capsule, it is wrapped with different medicines.

**Coupling (v.imp) (String coupling and Weaker coupling b/w classs) dekha class use hura word
Coupling refers to the knowledge or information or dependency of another class.
It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling.
You can use interfaces for the weaker coupling because there is no concrete implementation.

**Association(v.imp) (relationship between the objects ->Association can be undirectional or bidirectional.) dekha objects use hura word
Association represents the relationship between the objects. One object can be associated with one object or many objects. 
There can be four types of association between the objects:
For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many)
One to One
One to Many
Many to One, and
Many to Many

**Aggregation (Lose Association)
The Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state.
It represents the weak relationship between objects. It is also termed as a has-a relationship in Java.
Like, inheritance represents the is-a relationship. It is another way to reuse objects.

**Composition (Strong Association)
The composition is also a way to achieve Association. The composition represents the relationship where one object contains 
other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. 
It is the state where containing objects do not have an independent existence. 
--If you delete the parent object, all the child objects will be deleted automatically.


**What are the different ways to create an object.
By new keyword
By clone() method
By factory method etc.

**Anonymous object
An object which has no reference is known as an anonymous object. It can be used at the time of object creation only.

**Constructors
A constructor is a block of codes similar to the method. It is called when an instance of the class is created.
At the time of calling constructor, memory for the object is allocated in the memory.
It is a special type of method which is used to initialize the object.
Every time an object is created using the new() keyword, at least one constructor is called.
It calls a default constructor if there is no constructor available in the class. 
A constructor is just like a method but without return type. It can also be overloaded 
There are two types of constructors in Java: no-arg constructor, and parameterized constructor.

**Does constructor return any value?
Yes, it is the current class instance

**Rules for creating Java constructor
1) Constructor name must be the same as its class name
2) A Constructor must have no explicit return type
3) A Java constructor cannot be abstract, static, final, and synchronized

**static keyword
static is used for memory management mainly.
We can apply static keyword with variables, methods, blocks and nested classes (inner class).
The static keyword belongs to the class than an instance of the class.
The static variable gets memory only once in the class area at the time of class loading.
A static method belongs to the class rather than the object of a class.
A static method can be invoked without the need for creating an instance of a class.
A static method can access static data member and can change the value of it.
The static method can not use non static data member or call non-static method directly.
This and super cannot be used in static context.
Static block executed before the main method at the time of classloading.

**this keyword 
this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.
Call to this() must be the first statement in constructor.

**Inheritance
Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
there are 2 way to create the Inheritance (Has-A & IS-A)
IS-A relationship which is also known as a parent-child relationship.
For Method Overriding (so runtime polymorphism can be achieved).
The extends keyword indicates that you are making a new class that derives from an existing class
Multiple inheritance is not supported in Java through class.(only interface).
When a class inherits another class, it is known as a single inheritance. 
When there is a chain of inheritance, it is known as multilevel inheritance.
Multiple inheritance can be implemented in Java by using multiple interfaces. 


**Method Overloading
A class has multiple methods having same name but different in parameters, 
it is known as Method Overloading.
same name
different parameter
By changing the data type (not possible in java in cpp can be (ambiguity))
You can have any number of main methods in a class by method overloading.


**Method overriding
If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.
The method must have the same name as in the parent class.
The method must have the same parameter as in the parent class.
There must be an IS-A relationship(inheritance).

Can we override java main method?
No, because the main is a static method.


**Super Keyword (scop -> variable,method,constructor)
The super keyword in Java is a reference variable which is used to refer immediate parent class object.
super can be used to refer immediate parent class instance variable.
super can be used to invoke immediate parent class method.
super() can be used to invoke immediate parent class constructor.


**Final Keyword (scop -> variable, method, class)
The final keyword in java is used to restrict the user.
The java final keyword can be used in many context.
1) final variable (It will be constant).
2) If you make any method as final, you cannot override it.
3) If you make any class as final, you cannot extend it.
4) Yes, final method is inherited but you cannot override it
5)  initialize blank final variable Yes, but only in constructor.

Polymorphism 
Polymorphism is a concept by which we can perform a single action in different ways.
The word "poly" means many and "morphs" means forms. So polymorphism means many forms.
compile-time polymorphism and runtime polymorphism.
**If you overload a static method in Java, it is the example of compile time polymorphism.

Abstract class (good example factory method.)
Abstraction is a process of hiding the implementation details and showing only functionality to the user
A class which is declared with the abstract keyword is known as an abstract class
It can have abstract and non-abstract methods
There are two ways to achieve abstraction in java
1) Abstract class (0 to 100%)
2) Interface (100%)

An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.

Interface
An interface in Java is a blueprint of a class. It has static constants and abstract methods.
A class extends another class, an interface extends another interface, but a class implements an interface
Java Interface also represents the IS-A relationship.
we can have default and static methods in an interface. java 8
we can have private methods in an interface. java 9.


***What is marker or tagged interface
An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc.

Java Package
package is use to import the class.
A java package is a group of similar types of classes, interfaces and sub-packages.
Java package is used to categorize the classes and interfaces so that they can be easily maintained.


Access Modfirer
Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.
Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package

Non Access Modfirer
non-access modifiers
such as static
abstract
synchronized
native
volatile
transient

**method of wait blong to object class no the thread class
public final void wait(long timeout)throws InterruptedException


**Wrapper classes
Use to convert primitive into object and object into primitive.


factorial(5) 
   factorial(4) 
      factorial(3) 
         factorial(2) 
            factorial(1) 
               return 1 
            return 2*1 = 2 
         return 3*2 = 6 
      return 4*6 = 24 
   return 5*24 = 120
   
   
**Call by Value and Call by Reference
There is only call by value in java, not call by reference. 


1)  Method overloading is used to increase the readability of the program.
	Method overriding is used to provide the specific implementation of the method that is already provided by its super class.

2)	Method overloading is performed within class.
	Method overriding occurs in two classes that have IS-A (inheritance) relationship.

3)	In case of method overloading, parameter must be different.
	In case of method overriding, parameter must be same.

4)	Method overloading is the example of compile time polymorphism.
	Method overriding is the example of run time polymorphism.