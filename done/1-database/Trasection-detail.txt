Q: What is Transactional?
A: The @Transactional annotation is used to manage transactions in your application.
It ensures that a set of operations, such as database interactions, is executed within a single transaction, 
either committing all changes if everything works as expected or rolling back the changes if there is an error.

@Transactional(isolation = Isolation.SERIALIZABLE) (ACID)
@Transactional(timeout = X) (Time out)

--
@Transactional only works on public methods in Spring-managed beans (like services).
It’s better to use it in service layer methods as the transaction management works best in services.
****Spring's transaction management relies on AOP (Aspect-Oriented Programming), 
which works by creating a proxy around the target object (typically a service class).
--
Atomicity: Uncomment throw new RuntimeException("Force rollback"); to test rollback.
Consistency: After any transfer, total balance should remain ₹8000.
Isolation: Simulate parallel transfers with Postman or threads.
Durability: Even after simulated shutdown, committed transactions persist (within persistent DB, not H2).

1) Atomicity:
All or nothing. Either the entire transaction completes, or none of it does.
✅ Debit ₹1000 from Account A
✅ Credit ₹1000 to Account B
If the credit fails, the debit is rolled back.

2) Consistency:
The database must remain in a valid state before and after the transaction.
The total balance before = ₹8000
The total balance after = ₹8000
No money should magically disappear or appear.

3) Isolation:
Concurrent transactions shouldn't interfere with each other.
Suppose two users transfer money at the same time:
User A: ₹1000 from A to B
User B: ₹2000 from A to C
Each transaction should act like it’s the only one running, avoiding dirty reads, non-repeatable reads, etc.

4) Durability:
Once committed, the data is saved even if the system crashes.

@Transactional
public void transfer(Long fromId, Long toId, BigDecimal amount) {
	Account from = accountRepository.findById(fromId).orElseThrow(() -> new RuntimeException("Sender not found"));
	Account to = accountRepository.findById(toId).orElseThrow(() -> new RuntimeException("Receiver not found"));
	// check before doing the trasection is account have balnce or not
	if (from.getBalance().compareTo(amount) < 0) {
		throw new RuntimeException("Insufficient funds");
	}
	// subtract and add process
	from.setBalance(from.getBalance().subtract(amount));
	to.setBalance(to.getBalance().add(amount));
	// both trasectio must save
	accountRepository.save(from);
	accountRepository.save(to);
}

Q:- What is Saga Pattern?
A: In distributed microservices architecture, ensuring data consistency across multiple services is one of the biggest challenges.
The Saga Pattern is a design pattern used to manage distributed transactions in microservices, ensuring eventual consistency across different services.

Key Idea:
Break a transaction into small independent steps.
If any step fails, execute compensating actions to undo the previous steps.
Ensures eventual consistency instead of strong consistency.

Types of Saga Implementation
1. Choreography-Based Saga (Event-Driven Approach)
Each service publishes an event after it completes its work.
Other services listen for these events and trigger the next step.
No centralized controller.

2. Orchestration-Based Saga (Centralized Control)
A Saga Orchestrator is responsible for managing all steps.
It ensures that each step executes in sequence and handles rollbacks.

Best Practices for Implementing the Saga Pattern
✅ Use Event-Driven Architecture – Kafka, RabbitMQ, or AWS SQS for event-based messaging. 
✅ Ensure Idempotency – Avoid processing the same event multiple times. 

In simple terms:
Choreography = Loosely coupled
→ Each service listens to and emits events, unaware of who else is involved.

Orchestration = Tightly coupled
→ A central service (orchestrator) knows and controls the full flow, explicitly telling services what to do.